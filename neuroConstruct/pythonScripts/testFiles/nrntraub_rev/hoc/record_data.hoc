load_file("spikecount.hoc")

if (!name_declared("cu_mode")) {
		cu_mode=1
} 

strdef rd_tmp

// for recording data
objref null
objref rd_sfunc
rd_sfunc = new StringFunctions()
objref rd_rec_t, rd_rec_v, rd_rec_v_op, rd_rec_v_res
objref rd_tgto1
strdef rd_tstamp, rd_tstra1, rd_tstra2, rd_tstra3
rd_rec_t = new Vector(0)
rd_rec_v = new Vector(0)
rd_rec_v_op = new Vector(0)
rd_rec_v_res = new Vector(0)
objref rd_pdat_
rd_pdat_ = new List()
rd_pdat_.append(new Vector())
rd_pdat_.append(new String()) // x-label
rd_pdat_.append(new String()) // y-label
rd_pdat_.append(new String()) // chart description
// access these like this: rd_pdat_.o[0].x[0]
rd_pdat_.o[0].append(1) // min_x_coord
rd_pdat_.o[0].append(2) // min_y_coord
rd_pdat_.o[0].append(3) // max_x_coord
rd_pdat_.o[0].append(4) // max_y_coord
rd_pdat_.o[0].append(5) // color
rd_pdat_.o[0].append(6) // skip window decl (autoscale)

// initialize color setting
rd_pdat_.o[0].x[4]=0

objref rd_spikecount, rd_spikecount_x
rd_spikecount = new Vector(0)
rd_spikecount_x = new Vector(0)

objref rd_restv, rd_deriv, rd_derivfn, rd_restv_x, rd_valx, rd_valy
objref rd_resti, rd_derii, rd_deriifn, rd_resti_x
rd_restv = new Vector(0)
rd_deriv = new Vector(0)
rd_derivfn = new Vector(0)
rd_restv_x = new Vector(0)
rd_valx = new Vector(0)
rd_valy = new Vector(0)
rd_resti = new Vector(0)
rd_derii = new Vector(0)
rd_deriifn = new Vector(0)
rd_resti_x = new Vector(0)

strdef rd_gname, rd_sptr
objref strobj
strobj = new StringFunctions()

objref rd_i_, rd_it
rd_it = new Vector()
rd_i_ = new List()
for j=0, 14 {
		rd_i_.append(new Vector())
}
for j=0, 14 {
		rd_i_.append(new String())
}

// To track voltage clamp data
objref rd_vc_, rd_vct
rd_vct = new Vector() // time
rd_vc_ = new List()
rd_vc_.append(new Vector())
rd_vc_.append(new Vector())
rd_vc_.append(new String())
rd_vc_.append(new String())

// To investigate Ca mechanism
objref rd_ca_, rd_cat
rd_cat = new Vector() // time
rd_ca_ = new List()
rd_ca_.append(new Vector())
rd_ca_.append(new String())
objref rd_restca, rd_restca_x
rd_restca = new Vector()
rd_restca_x = new Vector()

proc record_data_vt() { 
		rd_rec_t.record(&t)		
		// sprint(vstr, "cell.comp[%d].v(.5)", 1) //  cell.presyn_comp = 57
		// execute(vsr)
		rd_rec_v.record(&v(0.5))
}

proc record_data_it() {
		rd_it.record(&t)
		
		rd_i_.o[0].record(&i_pas(0.5)) // g1.addexpr("cell.comp[2].i_pas(0.5)",1,1)
		rd_i_.o[0+15].s = "i_pas"
		rd_i_.o[1].record(&i_cap(0.5)) // g1.addexpr("cell.comp[2].i_cap",2,1)
		rd_i_.o[1+15].s = "i_cap"
		rd_i_.o[2].record(&ik(0.5)) // g1.addexpr("cell.comp[2].ik(0.5)",3,1)
		rd_i_.o[2+15].s = "ik"
		rd_i_.o[3].record(&ina(0.5)) // g1.addexpr("-cell.comp[2].ina(0.5)",4,1)
		rd_i_.o[3+15].s = "ina"
		// if (cu_mode == 1) {
		// 		rd_i_.o[4].record(&i_ar(0.5)) // g1.addexpr("cell.comp[2].i_ar",5,1)
		// 		rd_i_.o[4+15].s = "i_ar"
		// }
		if (cu_mode == 2) {
				rd_i_.o[4].record(&i_arx(0.5)) // g1.addexpr("cell.comp[2].i_ar",5,1)
				rd_i_.o[4+15].s = "i_arx"
		}
		rd_i_.o[5].record(&ica(0.5)) // g1.addexpr("cell.comp[2].ica",6,1)
		rd_i_.o[5+15].s = "ica"
		
		rd_i_.o[6].record(&ik_k2(0.5)) // g1.addexpr("cell.comp[2].ik_k2(0.5)",1,1) // ?
		rd_i_.o[6+15].s = "ik_k2"
		rd_i_.o[7].record(&ik_ka(0.5)) // g1.addexpr("cell.comp[2].ik_ka(0.5)",2,1) // ?
		rd_i_.o[7+15].s = "ik_ka"
		rd_i_.o[8].record(&ik_kahp_slower(0.5)) // g1.addexpr("cell.comp[2].ik_kahp_slower(0.5)",3,1) //
		rd_i_.o[8+15].s = "ik_kahp"
		rd_i_.o[9].record(&ik_kc_fast(0.5)) // g1.addexpr("cell.comp[2].ik_kc_fast(0.5)",4,1) // ?	
		rd_i_.o[9+15].s = "ik_kc_fast"
		rd_i_.o[10].record(&ik_kdr_fs(0.5)) // g1.addexpr("cell.comp[2].ik_kdr_fs(0.5)",5,1) // ?		
		rd_i_.o[10+15].s = "ik_kdr_fs"
		rd_i_.o[11].record(&ik_km(0.5)) // g1.addexpr("cell.comp[2].ik_km(0.5)",6,1) // ?       
		rd_i_.o[11+15].s = "ik_km"
		if (cu_mode == 1) {
				rd_i_.o[12].record(&ina_naf2(0.5)) // g1.addexpr("cell.comp[2].ina_naf2(0.5)",2,1) // ?
				rd_i_.o[12+15].s = "ina_naf2"
		}
		if (cu_mode == 2) {
				rd_i_.o[12].record(&ina_naf2x(0.5)) // g1.addexpr("cell.comp[2].ina_naf2(0.5)",2,1) // ?
				rd_i_.o[12+15].s = "ina_naf2x"
		}
		rd_i_.o[13].record(&ina_napf_spinstell(0.5)) // g1.addexpr("cell.comp[2].ina_napf_spinstell(0.5)",3,1) // ?
		rd_i_.o[13+15].s = "ina_napf_spinstell"
		
		rd_i_.o[14].record(&cai(0.5)) // g1.addexpr("cell.comp[2].ina_napf_spinstell(0.5)",3,1) // ?
		rd_i_.o[14+15].s = "cai"
		// g1.addexpr("cell.comp[2].ina(0.5)",1,1) // ?		
}

proc record_data_ca() {
		rd_cat.record(&t)
		// more ca details to be added later.. 
		rd_ca_.o[0].record(&cai(0.5))
		rd_ca_.o[1].s = "cai"
}

proc record_data_vclamp() {
		rd_vct.record(&t)
		// 			rd_rec_v.record(&v(0.5))	
		rd_vc_.o[0].record(&v(0.5)) // g1.addexpr("cell.comp[2].ina_napf_spinstell(0.5)",3,1) // ?
		rd_vc_.o[1].record(&$o1.i) // g1.addexpr("cell.comp[2].ina_napf_spinstell(0.5)",3,1) // ?
		rd_vc_.o[2].s = "vclamp-v"
		rd_vc_.o[3].s = "vclamp-i"
}


proc record_data_disk_vt() { localobj savt, savv
		system("date '+%Y-%m-%d_%H%M-%S'", rd_tstamp)
		rd_sfunc.left(rd_tstamp,18)
		
		record_data_file("t",rd_gname,rd_rec_t)
		record_data_file("v",rd_gname,rd_rec_v)
		
		record_data_process()
}

proc record_data_disk_vt_op() { localobj savt, savv
		system("date '+%Y-%m-%d_%H%M-%S'", rd_tstamp)
		rd_sfunc.left(rd_tstamp,18)
		
		record_data_file("t",rd_gname,rd_rec_t)
		record_data_file("v_op",rd_gname,rd_rec_v_op)
		
		record_data_process_op()
}

proc record_data_disk_it() { localobj savt, savv
		strdef	sloc1
		system("date '+%Y-%m-%d_%H%M-%S'", rd_tstamp)
		rd_sfunc.left(rd_tstamp,18)
		
		if (strobj.len(rd_gname) == 0) {
				rd_gname = "fx"
		}
		// wanted to separate into main currents and secondary
		// need to refactor as well
		for i=0,13 {
				sprint(sloc1,"%s",rd_i_.o[i+15].s)
				//				
				record_data_file(sloc1,rd_gname,rd_i_.o[i])
				rd_pdat_.o[0].x[4]=i // set a different color
				// create a plot: filename, ylabel, glabel, color
				record_data_process()
		}
		// set autoscale for cai
		sprint(sloc1,"%s",rd_i_.o[14+15].s)
		record_data_file(sloc1,rd_gname,rd_i_.o[14])
		rd_pdat_.o[0].x[5]=1
		record_data_process()
		// 
		strdef strlegend, strlegend1
		for i=0,14 {
				sprint(strlegend1,"%d,%s,",i,rd_i_.o[i+15].s)
				sprint(strlegend,"%s%s",strlegend,strlegend1)
		}
		record_data_legend(strlegend,"it")
		
}

proc record_data_disk_vclamp() {
		system("date '+%Y-%m-%d_%H%M-%S'", rd_tstamp)
		rd_sfunc.left(rd_tstamp,18)
		
		if (strobj.len(rd_gname) == 0) {
				rd_gname = "vcl"
		}
		
		rd_pdat_.o[2].s="mV"
		sprint(sloc1,"%s",rd_vc_.o[2].s)
		record_data_file(sloc1,rd_gname,rd_vc_.o[0])
		record_data_process()
		
		rd_pdat_.o[2].s="nA"
		sprint(sloc1,"%s",rd_vc_.o[3].s)
		record_data_file(sloc1,rd_gname,rd_vc_.o[1])
		record_data_process()
}

proc record_data_disk_ca() {
		system("date '+%Y-%m-%d_%H%M-%S'", rd_tstamp)
		rd_sfunc.left(rd_tstamp,18)
		
		if (strobj.len(rd_gname) == 0) {
				rd_gname = "rca"
		}
		
		rd_pdat_.o[2].s="mM"
		sprint(sloc1,"%s",rd_ca_.o[1].s)
		record_data_file(sloc1,rd_gname,rd_ca_.o[0])
		record_data_process()
		
}

proc record_data_file() { localobj savt
		// ---- needs cleaning some ugly ----
		// save file: filename, mechname, vector
		// (make a procedure of the below)
		system("date '+%Y-%m-%d_%H%M-%S'", rd_tstamp)
		rd_sfunc.left(rd_tstamp,18)
		
		// $s1=ik  $s2=name  $o3=the vector? unsure if it will work
		if (strcmp($s1, "t") == 0) {
				sprint(rd_tstra1, "batchdata/%s/bd_%s_%s_%s.dat", of_, $s1, $s2, rd_tstamp)
				print " rd_tstra1 ",rd_tstra1
				savt = new File()
				savt.wopen(rd_tstra1)
		} else if (strcmp($s1, "v") == 0) {
				sprint(rd_tstra2, "batchdata/%s/bd_%s_%s_%s.dat", of_, $s1, $s2, rd_tstamp)
				print " rd_tstra2 ",rd_tstra2
				savt = new File()
				savt.wopen(rd_tstra2)
		} else if (strcmp($s1, "v_op") == 0) {
				sprint(rd_tstra3, "batchdata/%s/bd_%s_%s_%s.dat", of_, $s1, $s2, rd_tstamp)
				print " rd_tstra3 ",rd_tstra3
				savt = new File()
				savt.wopen(rd_tstra3)
		} else {
				sprint(rd_tstra2, "batchdata/%s/bd_%s_%s_%s.dat", of_, $s1, $s2, rd_tstamp)
				print " rd_tstra2 ",rd_tstra2
				savt = new File()
				savt.wopen(rd_tstra2)
		}
		$o3.printf(savt)
		savt.close()
}

proc record_data_legend() {
		system("date '+%Y-%m-%d_%H%M-%S'", rd_tstamp)
		rd_sfunc.left(rd_tstamp,18)
		strdef rd_cmd
		sprint(rd_cmd,"./plotDat.py -onlylegend:%s batchdata/%s/bd_%s_%s.dat",$s1,of_,$s2,rd_tstamp)
		system(rd_cmd)
		print rd_cmd 
}

proc record_data_process() {
 		strdef rd_cmd
		strdef rd_win
		rd_win="" // by default no ranges specified
		if (rd_pdat_.o[0].x[5]==0  && rd_pdat_.o[0].x[0]!=rd_pdat_.o[0].x[2] && rd_pdat_.o[0].x[1]!=rd_pdat_.o[0].x[3]) {
				sprint(rd_win,"-win:'%lf,%lf,%lf,%lf'",rd_pdat_.o[0].x[0],rd_pdat_.o[0].x[1],		rd_pdat_.o[0].x[2]+rd_pdat_.o[0].x[0],   rd_pdat_.o[0].x[3]+rd_pdat_.o[0].x[1])
		} else if (rd_pdat_.o[0].x[5]==2) { // only vertical scale
				sprint(rd_win,"-winx:'%lf,%lf'",				rd_pdat_.o[0].x[0],				rd_pdat_.o[0].x[2]+rd_pdat_.o[0].x[0])
		}
		sprint(rd_cmd,"./plotDat.py -dt:'0.025' -color:%d %s -xlabel:'%s' -ylabel:'%s' -glabel:'%s' -alpha %s",rd_pdat_.o[0].x[4], rd_win, rd_pdat_.o[1].s,rd_pdat_.o[2].s,rd_pdat_.o[3].s,rd_tstra2)		
		//sprint(rd_cmd,"./plotDat.py -dt:'0.025' -color:%d -win:'%lf,%lf,%lf,%lf' -xlabel:'%s' -ylabel:'%s' -glabel:'%s' -alpha %s",rd_pdat_.o[0].x[4],  rd_pdat_.o[0].x[0],rd_pdat_.o[0].x[1],		rd_pdat_.o[0].x[2]+rd_pdat_.o[0].x[0],   rd_pdat_.o[0].x[3]+rd_pdat_.o[0].x[1],rd_pdat_.o[1].s,rd_pdat_.o[2].s,rd_pdat_.o[3].s,rd_tstra2)
		// weird neuron ranges for windows are not the same for matplotlib
		system(rd_cmd)
		print rd_cmd 
}

proc record_data_process_op() {
 		strdef rd_cmd
		strdef rd_win
		rd_win=""
		if (rd_pdat_.o[0].x[5]==0  && rd_pdat_.o[0].x[0]!=rd_pdat_.o[0].x[2] && rd_pdat_.o[0].x[1]!=rd_pdat_.o[0].x[3]) {
				sprint(rd_win,"-win:'%lf,%lf,%lf,%lf'",rd_pdat_.o[0].x[0],rd_pdat_.o[0].x[1],		rd_pdat_.o[0].x[2]+rd_pdat_.o[0].x[0],   rd_pdat_.o[0].x[3]+rd_pdat_.o[0].x[1])
		} else if (rd_pdat_.o[0].x[5]==2) { // only vertical scale
				sprint(rd_win,"-winx:'%lf,%lf'",				rd_pdat_.o[0].x[0],				rd_pdat_.o[0].x[2]+rd_pdat_.o[0].x[0])
		}
		sprint(rd_cmd,"./plotDat.py -dt:'0.025' -color:%d %s -xlabel:'%s' -ylabel:'%s' -glabel:'%s' -alpha %s",rd_pdat_.o[0].x[4], rd_win, rd_pdat_.o[1].s,rd_pdat_.o[2].s,rd_pdat_.o[3].s,rd_tstra3)
		// weird neuron ranges for windows are not the same for matplotlib
		system(rd_cmd)
		print rd_cmd 
}

proc record_data_process_xy() {
		strdef rd_cmd
		strdef rd_win
		rd_win=""
		print "note should be able to autoscale if win parameters are bad or null"
		if (rd_pdat_.o[0].x[5]==0  && rd_pdat_.o[0].x[0]!=rd_pdat_.o[0].x[2] && rd_pdat_.o[0].x[1]!=rd_pdat_.o[0].x[3]) {
				sprint(rd_win,"-win:'%lf,%lf,%lf,%lf'",rd_pdat_.o[0].x[0],rd_pdat_.o[0].x[1],		rd_pdat_.o[0].x[2]+rd_pdat_.o[0].x[0],   rd_pdat_.o[0].x[3]+rd_pdat_.o[0].x[1])
		} else if (rd_pdat_.o[0].x[5]==2) { // only vertical scale
				sprint(rd_win,"-winx:'%lf,%lf'",				rd_pdat_.o[0].x[0],				rd_pdat_.o[0].x[2]+rd_pdat_.o[0].x[0])
		}
		sprint(rd_cmd,"./plotDat.py -dtfile:%s  -color:%d %s -xlabel:'%s' -ylabel:'%s' -glabel:'%s' -alpha %s",rd_tstra1,rd_pdat_.o[0].x[4], rd_win, rd_pdat_.o[1].s,rd_pdat_.o[2].s,rd_pdat_.o[3].s,rd_tstra2)
		// weird neuron ranges for windows are not the same for matplotlib
		print rd_cmd 
		system(rd_cmd)
}

proc record_data_disk_xy() { localobj savt, savv
		system("date '+%Y-%m-%d_%H%M-%S'", rd_tstamp)
		rd_sfunc.left(rd_tstamp,18)

		if (strobj.len(rd_gname) > 0) {
				sprint(rd_tstra1, "batchdata/%s/bd_x_%s_%s.dat", of_, rd_gname, rd_tstamp)
		} else {
				sprint(rd_tstra1, "batchdata/%s/bd_x_%s.dat", of_, rd_tstamp)
		}
		savt = new File()
		savt.wopen(rd_tstra1)
		$o1.printf(savt)
		savt.close()
		
		if (strobj.len(rd_gname) > 0) {
				sprint(rd_tstra2, "batchdata/%s/bd_y_%s_%s.dat", of_, rd_gname, rd_tstamp)
		} else {
				sprint(rd_tstra2, "batchdata/%s/bd_y_%s.dat", of_, rd_tstamp)
		}
		savv = new File()
		savv.wopen(rd_tstra2)
		$o2.printf(savv)
		savv.close()
		
		record_data_process_xy()
}


proc record_data_spike() {
		// gather data for each iteration
		rd_spikecount.append(spikecount(rd_rec_v,$1)) // $1 threshold value
		rd_spikecount_x.append($2)  // reference x-value
}

func record_data_spike_distance() {
		// find spike close to the position specified
		// calculate distance
		// return that distance
		// v.spikebin(data,thresh) can be used to match spike onset
		// need to also find the width?
		return 0.1
}

proc record_data_restv() {
		// --- need to amend to not store when its junk ---
		// gather restpotential data each iteration and derivative
		rd_derivfn.resize(0) // remove old data
		rd_derivfn.deriv(rd_rec_v, 0.1, 2)
		rd_deriv.append(rd_derivfn.x[$1]) // this isn't time, but index
		rd_restv.append(rd_rec_v.x[$1])   // this isn't time, but index
		rd_restv_x.append($2)
}

proc record_data_restvclamp() {
		// assume that passed $1 is a time value with valid data at t-50
		// we need to take a mean of this data to avoid fast fluctuations due to clamp
		// rd_derivfn.resize(0) // if we wanted deriv uncomment+rework
		// rd_derivfn.deriv(rd_rec_v, 0.1, 2) // should I smooth before deriv?
		// rd_deriv.append(rd_derivfn.x[$1]) // this isn't time, but index
		rd_restv.append(rd_vc_.o[0].mean(($1-60)/dt,($1-10)/dt))
		rd_resti.append(rd_vc_.o[1].mean(($1-60)/dt,($1-10)/dt))
		rd_restv_x.append($2)
}

proc record_data_disk_vclamp_summary() {
		strdef rd_tmpstr
		
		sprint(rd_sptr,"ss_%s",rd_gname)
		rd_gname=rd_sptr
		record_data_disk_xy(rd_restv,rd_resti)
				
		// clear data for next simulation
		rd_deriv.resize(0)
		rd_restv.resize(0)
		rd_resti.resize(0)
		rd_restv_x.resize(0)		
}

// for calcium dynamics

proc record_data_restca() {
		rd_restca.append(rd_ca_.o[0].mean(($1-60)/dt,($1-10)/dt))
		rd_restca_x.append($2)
}

proc record_data_disk_ca_summary() {
		strdef rd_tmpstr
		
		sprint(rd_sptr,"ca_%s",rd_gname)
		rd_gname=rd_sptr
		record_data_disk_xy(rd_restca_x,rd_restca)
				
		// clear data for next simulation
		rd_restca.resize(0)
		rd_restca_x.resize(0)		
}

proc record_data_disk_summary() {
		strdef rd_tmpstr
		// store collected data
		
		if (rd_spikecount.size() > 1) {     // if length of spikes array > 0 store it
				rd_pdat_.o[2].s="Spike Count"
				rd_tmpstr=rd_gname
				sprint(rd_sptr,"sc_%s",rd_gname)
				rd_gname=rd_sptr
				record_data_disk_xy(rd_spikecount_x,rd_spikecount)	
				rd_gname=rd_tmpstr
		}
		
		if (rd_restv.size() > 1) {          // if length of measureN array > 0 store it
				rd_pdat_.o[2].s="V at t1 in mV (iff not spiking)"
				rd_tmpstr=rd_gname
				sprint(rd_sptr,"ss_%s",rd_gname)
				rd_gname=rd_sptr
				record_data_disk_xy(rd_restv_x,rd_restv)
				rd_gname=rd_tmpstr
				
				// graph deriv of point at rest as well
				rd_pdat_.o[2].s="dV/dt at t1 in mV (iff not spiking)"
				rd_tmpstr=rd_gname
				sprint(rd_sptr,"dss_%s",rd_gname)
				rd_gname=rd_sptr
				record_data_disk_xy(rd_restv_x,rd_deriv)
				rd_gname=rd_tmpstr
		}
		
		// clear data for next simulation
		rd_spikecount.resize(0)
		rd_spikecount_x.resize(0)
		rd_deriv.resize(0)
		rd_restv.resize(0)
		rd_restv_x.resize(0)
}

proc record_data_val() {
		rd_valx.append($1) // this is generic
		rd_valy.append($2) // this is generic data
}

proc record_data_disk_summary_val() {
		rd_tmpstr=rd_gname
		sprint(rd_sptr,"sc_%s",rd_gname)
		rd_gname=rd_sptr
		record_data_disk_xy(rd_valx,rd_valy)
		rd_gname=rd_tmpstr
		
		rd_valx.resize(0)
		rd_valy.resize(0)
}


// strdef mytstr1
// for i=1,1 {getstr(mytstr1) plot_params_.append(new String(mytstr1))}
// 0  -80  500  120  xlabel_text  ylabel_text  graph_text
// rd_x1 = 0 rd_y1 = 0 rd_x2 = 0 rd_y2 = 0
// strdef rd_xlab, rd_ylab, rd_glab
// i = sscanf(plot_params_.object(0).s, "%d %d %d %d %s %s %s", &rd_x1, &rd_y1, &rd_x2, &rd_y2, rd_xlab, rd_ylab, rd_glab)
// print "record data indo x1,yx,x2,y2: ",rd_x1," ",rd_y1," ",rd_x2," ",rd_y2," xlb:",rd_xlab," ylb: ",rd_ylab," glb: ",rd_glab
// for j=0, plot_params_.count()-1 {
// 		print plot_params_.o[j]
// }
				
proc record_data_export_text() { localobj mview_export
		system("date '+%Y-%m-%d_%H%M-%S'", rd_tstamp)
		rd_sfunc.left(rd_tstamp,18)

		mview_export = new ModelView(0)
		sprint(rd_tmp, "ss_cu_%d_%s.txt", $1,rd_tstamp)
		mview_export.textp(rd_tmp)
		mview_export.destroy()
		// objref m		
}
